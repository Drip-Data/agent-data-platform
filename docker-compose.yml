version: '3.8'

services:
  # Redis队列服务
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 4gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # vLLM推理服务（可选）
  vllm:
    image: vllm/vllm-openai:v0.2.7
    environment:
      - MODEL=Salesforce/codegen-350M-mono
      - TENSOR_PARALLEL_SIZE=1
      - GPU_MEMORY_UTILIZATION=0.8
      - MAX_MODEL_LEN=2048
    ports:
      - "8000:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 任务分发器
  dispatcher:
    build: .
    environment:
      - REDIS_URL=redis://redis:6379
      - TASK_FILE=/app/tasks.jsonl
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./tasks.jsonl:/app/tasks.jsonl:ro
      - ./output:/app/output
    restart: unless-stopped
    command: python -m core.dispatcher
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
  # 轻量代码执行运行时
  sandbox-runtime:
    build:
      context: .
      dockerfile: ./runtimes/sandbox/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - VLLM_URL=http://vllm:8000
      - LOG_LEVEL=INFO
      # 缓存配置 - 设置为true时禁用缓存，强制每次使用LLM生成新代码
      - DISABLE_CACHE=${DISABLE_CACHE:-false}
      # 轨迹保存配置 - 设置为true时同时保存单独的轨迹文件
      - SAVE_INDIVIDUAL_TRAJECTORIES=${SAVE_INDIVIDUAL_TRAJECTORIES:-false}
      # 外部API配置 - 主要使用Google Gemini
      # Google Gemini API配置
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=${GEMINI_API_URL}
      # DeepSeek API配置（备用）
      # - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      # - DEEPSEEK_API_URL=${DEEPSEEK_API_URL}
      # 通用OpenAI兼容API配置（备用）
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - OPENAI_API_BASE=${OPENAI_API_BASE}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./output:/app/output
    restart: unless-stopped
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    deploy:
      replicas: 2  # 运行2个实例

  # Web导航运行时
  web-runtime:
    build:
      context: .
      dockerfile: ./runtimes/web_navigator/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - VLLM_URL=http://vllm:8000
      - LOG_LEVEL=INFO
      # 外部API配置 - 主要使用Google Gemini
      # Google Gemini API配置
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=${GEMINI_API_URL}
      # DeepSeek API配置（备用）
      # - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      # - DEEPSEEK_API_URL=${DEEPSEEK_API_URL}
      # 通用OpenAI兼容API配置（备用）
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - OPENAI_API_BASE=${OPENAI_API_BASE}
      - MAX_CONCURRENT=4
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./output:/app/output
    ports:
      - "8002:8002"  # metrics
    restart: unless-stopped
    shm_size: 2gb
    deploy:
      replicas: 1

  # 推理运行时服务
  reasoning-runtime:
    build:
      context: .
      dockerfile: ./docker/reasoning.Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - VLLM_URL=http://vllm:8000
      - LOG_LEVEL=INFO
      # Google Gemini API配置
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=${GEMINI_API_URL}
      # DeepSeek API配置（备用）
      # - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      # - DEEPSEEK_API_URL=${DEEPSEEK_API_URL}
      # 通用OpenAI兼容API配置（备用）
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - OPENAI_API_BASE=${OPENAI_API_BASE}
      # 推理运行时特有配置（如需要）
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./output:/app/output
    ports:
      - "8003:8003"
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.48.1
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana仪表板
  grafana:
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge