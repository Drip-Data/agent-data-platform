services:
  # Redis队列服务
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 4gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - agent_network

  # vLLM推理服务（可选 - 可以不启动，reasoning-runtime将使用外部API）
  vllm:
    image: vllm/vllm-openai:v0.2.7
    environment:
      - MODEL=Salesforce/codegen-350M-mono
      - TENSOR_PARALLEL_SIZE=1
      - GPU_MEMORY_UTILIZATION=0.8
      - MAX_MODEL_LEN=2048
    ports:
      - "8000:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - agent_network
    profiles:
      - optional  # 标记为可选服务，需要时手动启动

  # 任务分发器 (现在包含Task API)
  dispatcher:
    build: .
    environment:
      - REDIS_URL=redis://redis:6379
      - TASK_FILE=/app/tasks.jsonl
      - LOG_LEVEL=INFO
      - API_PORT=8000
    ports:
      - "8000:8000" # Task API HTTP端口
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./tasks.jsonl:/app/tasks.jsonl:ro
      - ./output:/app/output
    restart: unless-stopped
    command: python -m uvicorn core.task_api:app --host 0.0.0.0 --port 8000
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    networks:
      - agent_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Mock Image Generation MCP Server
  mock-image-server:
    build:
      context: .
      dockerfile: ./docker/mock-image-server.Dockerfile
    environment:
      - LOG_LEVEL=INFO
      - MCP_SERVER_ENDPOINT=ws://mock-image-server:8080/mcp
    ports:
      - "8082:8080"  # Mock Image Generation MCP server port
    networks:
      - agent_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Toolscore MCP Server
  toolscore:
    build:
      context: .
      dockerfile: ./docker/toolscore.Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # LLM配置
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=${GEMINI_API_URL}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - DEEPSEEK_API_URL=${DEEPSEEK_API_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      # Docker配置
      - DOCKER_NETWORK=agent-data-platform_agent_network
      - DOCKER_PORT_RANGE=8100-8200
      - MCP_IMAGE_CACHE_PATH=/app/mcp_images
      - MCP_CONTAINER_DATA_PATH=/app/mcp_containers
      - MCP_AUTO_RECOVERY=true
    ports:
      - "8080:8080"  # WebSocket服务
      - "8090-8091:8090-8091"  # HTTP API服务
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # 允许访问Docker socket
      - mcp_images:/app/mcp_images              # MCP镜像缓存
      - mcp_containers:/app/mcp_containers      # MCP容器数据
      - ./mcp_tools.json:/app/mcp_tools.json
    restart: unless-stopped
    privileged: true  # 需要特权模式来使用Docker
    # 🔧 添加DNS配置，解决DNS解析问题
    dns:
      - 8.8.8.8      # Google DNS
      - 1.1.1.1      # Cloudflare DNS
    # 🔧 添加网络配置，允许外部访问
    extra_hosts:
      - "generativelanguage.googleapis.com:142.250.191.202"  # 固定Google API IP
    networks:
      - agent_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8090/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Python Executor MCP Server
  python-executor-server:
    build:
      context: .
      dockerfile: ./mcp_servers/python_executor_server/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - MCP_SERVER_ENDPOINT=ws://python-executor-server:8081/mcp
      - TOOLSCORE_ENDPOINT=ws://toolscore:8080/websocket
    ports:
      - "8081:8081" # Python Executor MCP server port
    depends_on:
      redis:
        condition: service_healthy
      toolscore:
        condition: service_healthy
    networks:
      - agent_network
    restart: unless-stopped

  # 轻量代码执行运行时 (原 sandbox-runtime，现在其功能由 python-executor-server 提供)
  # 已被 python-executor-server 替代，默认不启动
  sandbox-runtime:
    build:
      context: .
      dockerfile: ./runtimes/sandbox/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - VLLM_URL=http://vllm:8000
      - LOG_LEVEL=INFO
      # 缓存配置 - 设置为true时禁用缓存，强制每次使用LLM生成新代码
      - DISABLE_CACHE=${DISABLE_CACHE:-false}
      # 轨迹保存配置 - 设置为true时同时保存单独的轨迹文件
      - SAVE_INDIVIDUAL_TRAJECTORIES=${SAVE_INDIVIDUAL_TRAJECTORIES:-false}
      # 外部API配置 - 主要使用Google Gemini
      # Google Gemini API配置
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=${GEMINI_API_URL}
      # DeepSeek API配置（备用）
      # - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      # - DEEPSEEK_API_URL=${DEEPSEEK_API_URL}
      # 通用OpenAI兼容API配置（备用）
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - OPENAI_API_BASE=${OPENAI_API_BASE}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./output:/app/output
    restart: unless-stopped
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    deploy:
      replicas: 2  # 运行2个实例
    networks:
      - agent_network
    profiles:
      - excluded # 默认不启动，已被 python-executor-server 替代

  # Browser Navigator MCP Server
  browser-navigator-server:
    build:
      context: .
      dockerfile: ./mcp_servers/browser_navigator_server/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - MCP_SERVER_ENDPOINT=ws://browser-navigator-server:8082/mcp
      - TOOLSCORE_ENDPOINT=ws://toolscore:8080/websocket
    ports:
      - "8082:8082" # Browser Navigator MCP server port
    depends_on:
      redis:
        condition: service_healthy
      toolscore:
        condition: service_healthy
    networks:
      - agent_network
    restart: unless-stopped
    shm_size: 2gb # For Playwright browser
    profiles:
      - excluded # 默认不启动

  # Web导航运行时 (原 web-runtime，现在其功能由 browser-navigator-server 提供)
  # 已被 browser-navigator-server 替代，默认不启动
  web-runtime:
    build:
      context: .
      dockerfile: ./runtimes/web_navigator/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - VLLM_URL=http://vllm:8000
      - LOG_LEVEL=INFO
      # 外部API配置 - 主要使用Google Gemini
      # Google Gemini API配置
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=${GEMINI_API_URL}
      # DeepSeek API配置（备用）
      # - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      # - DEEPSEEK_API_URL=${DEEPSEEK_API_URL}
      # 通用OpenAI兼容API配置（备用）
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - OPENAI_API_BASE=${OPENAI_API_BASE}
      - MAX_CONCURRENT=4
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./output:/app/output
    ports:
      - "8002:8002"  # metrics
    restart: unless-stopped
    shm_size: 2gb
    deploy:
      replicas: 1
    networks:
      - agent_network
    profiles:
      - excluded # 默认不启动，已被 browser-navigator-server 替代

  # 增强推理运行时服务 (使用新的MCP架构)
  enhanced-reasoning-runtime:
    build:
      context: .
      dockerfile: ./docker/enhanced_reasoning.Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - TOOLSCORE_URL=ws://toolscore:8080/websocket
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      # 外部API配置 - 主要使用Google Gemini
      # Google Gemini API配置
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=${GEMINI_API_URL}
      # DeepSeek API配置（备用）
      # - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      # - DEEPSEEK_API_URL=${DEEPSEEK_API_URL}
      # 通用OpenAI兼容API配置（备用）
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - OPENAI_API_BASE=${OPENAI_API_BASE}
      # MCP动态搜索和安装配置
      - MCP_SEARCH_ENABLED=true
      - MCP_SEARCH_TIMEOUT=30
      - MCP_SEARCH_MAX_CANDIDATES=10
      - MCP_SECURITY_LEVEL=high
      - MCP_TRUSTED_AUTHORS=anthropic,microsoft,google
      - DOCKER_NETWORK=agent-data-platform_agent_network
      - DOCKER_PORT_RANGE=8100-8200
    depends_on:
      redis:
        condition: service_healthy
      toolscore:
        condition: service_healthy
    volumes:
      - ./output:/app/output
      - ./tests:/app/tests # 挂载测试目录
      - /var/run/docker.sock:/var/run/docker.sock  # 允许访问Docker socket
    networks:
      - agent_network
    restart: unless-stopped
    privileged: true  # 需要特权模式来使用Docker
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; from runtimes.reasoning.enhanced_runtime import EnhancedReasoningRuntime; print('healthy')"]

  # 任务合成学习服务 (Synthesis)
  synthesis:
    build: .
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # 合成器配置 - 基于JSON文件存储
      - SYNTHESIS_ENABLED=true
      # 自动化功能配置
      - AUTO_MONITOR_TRAJECTORIES=${AUTO_MONITOR_TRAJECTORIES:-true}
      - AUTO_EXPORT_SEEDS=${AUTO_EXPORT_SEEDS:-true}
      # LLM API配置 (统一接口)
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=${GEMINI_API_URL}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - DEEPSEEK_API_URL=${DEEPSEEK_API_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      - API_PORT=9000
    ports:
      - "9000:9000" # Synthesis HTTP API
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./output:/app/output
    restart: unless-stopped
    command: bash -c "python -m core.synthesiscore.synthesis & python -m uvicorn core.synthesiscore.synthesis_api:app --host 0.0.0.0 --port 9000"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    networks:
      - agent_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # 传统推理运行时服务 (保留作为备用)
  reasoning-runtime:
    build:
      context: .
      dockerfile: ./docker/reasoning.Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - VLLM_URL=http://vllm:8000
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      # 外部API配置 - 主要使用Google Gemini
      # Google Gemini API配置
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=${GEMINI_API_URL}
      # DeepSeek API配置（备用）
      # - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      # - DEEPSEEK_API_URL=${DEEPSEEK_API_URL}
      # 通用OpenAI兼容API配置（备用）
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - OPENAI_API_BASE=${OPENAI_API_BASE}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./output:/app/output
    networks:
      - agent_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; from runtimes.reasoning.runtime import ReasoningRuntime; print('healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    profiles:
      - backup  # 标记为备用服务

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.48.1
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - agent_network

  # Grafana仪表板
  grafana:
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
    restart: unless-stopped
    networks:
      - agent_network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  mcp_images:      # MCP镜像缓存
  mcp_containers:  # MCP容器持久化数据

networks:
  agent_network:
    driver: bridge