# 前端交互界面设计与施工计划

该文档给出了为 **Agent 数据平台** 增加前端交互界面的思路和实施步骤。目标是在不改变现有后端运行逻辑的前提下，让用户能够通过网页选择 `tasks.jsonl` 文件、启动任务执行，并实时查看运行状态和统计信息。

## 1. 设计目标

1. **简化操作**：用户无需手动执行 `docker compose` 命令即可运行任务。
2. **可视化监控**：在网页上展示任务队列状态、各运行时实例的进度以及主要统计指标（成功率、平均耗时等）。
3. **兼容现有输出**：任务执行仍保存到 `output/trajectories`，前端可读取并展示轨迹摘要。

## 2. 总体方案

### 2.1 架构概览

```
浏览器 (React/Vue)
        │  HTTP/WS
前端服务器 (FastAPI)
        │  调用脚本
任务调度与运行 (现有 Python + Docker)
```

- **前端页面** 负责文件选择、任务启动、进度展示与结果预览。
- **前端服务器** 提供 REST API：上传/选择 `tasks.jsonl`、启动运行、查询进度。必要时可通过 WebSocket 推送实时日志。
- **任务执行** 仍由现有脚本完成，例如调用 `docker compose up` 或直接运行 `python main.py`。前端服务器充当指挥者。

### 2.2 页面功能规划

1. **任务文件选择**：允许用户从本地上传 `tasks.jsonl`，或在服务器已有文件中选取。
2. **运行控制**：点击 "开始运行" 后，前端向服务器发送启动请求，并展示任务总数、已完成数、正在运行的容器等信息。
3. **实时日志/进度**：通过轮询或 WebSocket 获取最新统计数据，包括各 runtime 的当前任务 ID、执行阶段、错误概览等。
4. **结果预览**：运行完成后，可在页面中查看 `trajectories_collection.json` 的摘要，或下载完整文件。

### 2.3 后端接口示例

- `POST /api/tasks/start`：传入任务文件路径或上传内容，启动执行流程，返回任务批次 ID。
- `GET /api/tasks/{batch_id}/status`：查询批次的总体进度和各 runtime 状态。
- `GET /api/tasks/{batch_id}/trajectories`：获取执行完成后的轨迹摘要或下载链接。
- `POST /api/tasks/{batch_id}/stop`：可选，提前终止运行。

### 2.4 运行时监控

- 借助现有的 `output/` 目录和监控数据（Prometheus 等），定期读取并汇总统计信息。
- 前端以图表形式展示：成功/失败任务数、平均耗时、错误类型分布等。

## 3. 施工计划

1. **原型阶段（1 周）**
   - 使用 FastAPI 搭建最小化后端，能接收任务文件并调用现有脚本。
   - 前端采用 Vite + Vue 或 React，实现文件上传和简单进度轮询。

2. **功能完善（2~3 周）**
   - 补充任务批次管理、日志收集与展示。
   - 引入 WebSocket 实时推送，前端显示运行日志和指标图表。
   - 增加权限控制与错误回退逻辑。

3. **优化与部署（1 周）**
   - 前后端打包至 Docker 镜像，提供一键启动脚本。
   - 编写文档，说明如何配置和访问该前端界面。

## 4. 后续扩展方向

- 与现有监控体系（Prometheus/Grafana）整合，展示更丰富的历史统计数据。
- 支持多用户并发运行与队列管理。
- 在页面中直接浏览、搜索轨迹文件内容，便于分析与调试。

---

该方案旨在在不破坏现有 Pipeline 的基础上，为数据平台提供更加友好和直观的交互方式。后续可根据实际需求逐步迭代完善。

